(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{331:function(_,v,t){"use strict";t.r(v);var r=t(4),s=Object(r.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"计算机组成原理篇"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#计算机组成原理篇"}},[_._v("#")]),_._v(" "),v("strong",[_._v("计算机组成原理篇")])]),_._v(" "),v("blockquote",[v("p",[_._v("下面是笔者对于"),v("strong",[_._v("计算机组成原理")]),_._v("知识点一些总结，对于"),v("strong",[_._v("保研和考研")]),_._v("均适用，对找工作的同学也有一定参考作用。")])]),_._v(" "),v("h3",{attrs:{id:"_1-什么是摩尔定律-★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-什么是摩尔定律-★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("1. 什么是摩尔定律？★")])])]),_._v(" "),v("p",[_._v("当价格不变时，集成电路上可容纳的元器件的数目，约每隔 18~24 个月便会增加一倍，性能也将提升一倍。")]),_._v(" "),v("h3",{attrs:{id:"_2-什么是冯诺依曼机-冯诺依曼结构的特点是什么-什么是存储程序-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是冯诺依曼机-冯诺依曼结构的特点是什么-什么是存储程序-★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("2. 什么是冯诺依曼机？冯诺依曼结构的特点是什么？什么是存储程序？★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("冯诺依曼机")])])]),_._v(" "),v("p",[_._v("“存储程序” 的思想奠定了现代计算机的基本结构，以此概念为基础的各类计算机通称为冯 · 诺依曼机。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("特点：")])])]),_._v(" "),v("p",[_._v("（1）计算机硬件系统由运算器、存储器、控制器、输入设备和输出设备 5 大部件组成。")]),_._v(" "),v("p",[_._v("（2）指令和数据以同等地位存储在存储器中，并可按地址寻访。")]),_._v(" "),v("p",[_._v("（3）指令和数据均用二进制代码表示。")]),_._v(" "),v("p",[_._v("（4）指令由操作码和地址码组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。")]),_._v(" "),v("p",[_._v("（5）指令在存储器内按顺序存放。通常，指令是顺序执行的，在特定条件下可根据运算结果或根据设定的条件改变执行顺序。")]),_._v(" "),v("p",[_._v("（6）早期的冯诺依曼机以运算器为中心，输入／输出设备通过运算器与存储器传送数据。现代计算机以存储器为中心。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("存储程序")])])]),_._v(" "),v("p",[_._v("“存储程序” 的概念是指将指令以代码的形式事先输入计算机的主存储器，然后按其在存储器中的首地址执行程序的第一条指令，以后就按该程序的规定顺序执行其他指令，直至程序执行结束。")]),_._v(" "),v("h3",{attrs:{id:"_3-简述一下计算机的主要性能指标。★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-简述一下计算机的主要性能指标。★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("3. 简述一下计算机的主要性能指标。★★")])])]),_._v(" "),v("p",[v("strong",[_._v("（1）机器字长")])]),_._v(" "),v("p",[_._v("机器字长是指计算机进行一次整数运算（即定点整数运算）所能处理的二进制数据的位数。")]),_._v(" "),v("p",[v("strong",[_._v("（2）数据通路带宽")])]),_._v(" "),v("p",[_._v("数据通路带宽是指数据总线一次所能并行传送信息的位数。")]),_._v(" "),v("p",[v("strong",[_._v("（3）主存容量")])]),_._v(" "),v("p",[v("strong",[_._v("（4）运算速度")])]),_._v(" "),v("p",[_._v("①吞吐量和响应时间")]),_._v(" "),v("p",[_._v("②主频和 CPU 时钟周期。")]),_._v(" "),v("h3",{attrs:{id:"_4-为什么-dram-需要刷新-★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-为什么-dram-需要刷新-★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("4. 为什么 Dram 需要刷新？★★")])])]),_._v(" "),v("p",[_._v("DRAM 是一种易失性存储器，它通过电容来存储数据。每个存储单元由一个电容和一个访问晶体管组成，电容的充放电状态表示存储的数据值。然而，电容存储的电荷会逐渐漏失，导致存储的数据值逐渐衰减。为了保持数据的正确性，DRAM 需要周期性地进行刷新操作。")]),_._v(" "),v("h3",{attrs:{id:"_5-简述多级存储系统。★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-简述多级存储系统。★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("5. 简述多级存储系统。★★★")])])]),_._v(" "),v("p",[_._v("为了解决存储系统大容量、高速度和低成本 3 个相互制约的矛盾，在计算机系统中，通常采用多级存储器结构，在图中由上至下，位价越来越低，速度越来越慢，容量越来越大， CPU 访问的频度也越来越低。")]),_._v(" "),v("p",[_._v("实际上，存储系统层次结构主要体现在 “Cache－主存” 层次和 “主存－辅存” 层次。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("前者主要解决 CPU 和主存速度不匹配的问题，后者主要解决存储系统的容量问题。")])])]),_._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://i-blog.csdnimg.cn/direct/1d67f9eaec204ea7adae2b4f64b998ce.png",loading:"lazy"}})]),_._v(" "),v("h3",{attrs:{id:"_6-什么是-cache-cache-有什么作用-★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-什么是-cache-cache-有什么作用-★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("6. 什么是 Cache？Cache 有什么作用？★★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("Cache")])])]),_._v(" "),v("p",[_._v("高速缓冲存储器，是位于 CPU 和主存储器 DRAM 之间，规模较小，但速度很高的存储器，通常由 SRAM 组成。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("作用")])])]),_._v(" "),v("p",[_._v("是提高 CPU 数据输入输出的速率（解决 CPU 和主存速度不匹配的问题）。Cache 容量小但速度快，内存速度较低但容量大。")]),_._v(" "),v("h3",{attrs:{id:"_7-cache-三种映射方式的优缺点是什么-★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-cache-三种映射方式的优缺点是什么-★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("7. Cache 三种映射方式的优缺点是什么？★★★★")])])]),_._v(" "),v("p",[_._v("Cache 的三种映射方式分别是直接映射、全相联映射和组相联映射。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("直接映射")])])]),_._v(" "),v("p",[_._v("优点：直接映射是最简单和最直接的映射方式，在硬件设计上较为简单，存储器结构相对较小，成本低廉。")]),_._v(" "),v("p",[_._v("缺点：容易产生冲突，当不同的主存块被映射到相同的缓存块时，就会发生冲突，导致性能损失。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("全相联映射")])])]),_._v(" "),v("p",[_._v("优点：全相联映射可以避免直接映射中的冲突问题，因为任何一个主存块都可以映射到任何一个缓存块中。")]),_._v(" "),v("p",[_._v("缺点：存储器结构复杂，需要额外的硬件支持，包括比较电路和选择电路，因此成本较高。另外，由于所有块都可映射到任意位置，查找所需的时间长，不利于快速访问。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("组相联映射")])])]),_._v(" "),v("p",[_._v("优点：组相联映射综合了直接映射和全相联映射的特点，在硬件结构设计上既可以减小成本，又能够一定程度上解决冲突问题。")]),_._v(" "),v("p",[_._v("缺点：虽然减小了全相联映射的比较电路和选择电路的复杂度，但仍然需要进行块在组内的比较。此外，如果组的数量设置不合理，仍然可能导致冲突，性能下降。")]),_._v(" "),v("h3",{attrs:{id:"_8-介绍一下多级-cache。★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-介绍一下多级-cache。★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("8. 介绍一下多级 Cache。★★")])])]),_._v(" "),v("p",[_._v("多级缓存是一种层次化的缓存结构，通常包括 L1、L2、L3 等多个级别的缓存。它的设计目的是提供更高的访问速度和更好的性能。")]),_._v(" "),v("p",[_._v("多级缓存的主要思想是根据访问速度和容量的权衡，将缓存划分为多个级别，每个级别的缓存大小和访问速度逐级降低。通常，L1 缓存是距离处理器（CPU）最近的、最小但速度最快的缓存，而 L2 和 L3 缓存则相对较大但速度较慢。这种层次化的缓存结构可以有效地利用不同类型的缓存来提高缓存命中率，并减少对主存的访问次数，从而加快数据访问速度。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("优点：")])])]),_._v(" "),v("p",[_._v("（1）更快的访问速度：由于 L1 缓存离处理器最近且速度最快，能够更快地响应 CPU 的数据访问请求，减少访问延迟。")]),_._v(" "),v("p",[_._v("（2）更高的命中率：多级缓存可以利用不同的缓存级别来提高命中率，减少对主存的访问次数，提高数据的局部性。")]),_._v(" "),v("p",[_._v("（3）更大的容量：通过增加多个级别的缓存，整个缓存系统的容量也得到扩展，能够存储更多的数据，提供更高的数据吞吐量。")]),_._v(" "),v("p",[_._v("（4）降低总线和内存带宽的负载：多级缓存可以减少对总线和主存的访问次数，从而减轻了内存带宽的压力，提高系统整体的效率。")]),_._v(" "),v("h3",{attrs:{id:"_9-介绍一下写更新策略。★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-介绍一下写更新策略。★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("9. 介绍一下写更新策略。★★")])])]),_._v(" "),v("p",[_._v("缓存更新算法是用于决定何时在缓存中更新数据的策略。以下是几种常见的缓存更新算法：")]),_._v(" "),v("p",[_._v("**   （1）"),v("strong",[v("strong",[_._v("全写法（写命**中时）")])])]),_._v(" "),v("p",[_._v("直写策略在每次数据写入操作时，会立即更新缓存和主存中的对应数据。")]),_._v(" "),v("p",[_._v("优点：保持缓存和主存的数据一致性，可以避免数据丢失。")]),_._v(" "),v("p",[_._v("缺点：写操作的延迟较高，因为需要等待数据写入到主存后才能继续执行。")]),_._v(" "),v("p",[v("strong",[_._v("（2）写回法（写命中时）")])]),_._v(" "),v("p",[_._v("回写策略将数据修改操作仅限于缓存中进行，而不是立即更新主存。")]),_._v(" "),v("p",[_._v("当被修改的数据被替换出缓存时，才将其写回主存。也可以通过显式写回指令控制写回时机。")]),_._v(" "),v("p",[_._v("优点：减少了写操作的延迟，提高了缓存访问速度。")]),_._v(" "),v("p",[_._v("缺点：可能导致缓存中的数据和主存数据不一致，需要额外的机制来维护缓存和主存之间的一致性。")]),_._v(" "),v("p",[v("strong",[_._v("（3）写分配法（写不命中时）")])]),_._v(" "),v("p",[_._v("写分配策略在发生写操作时，将数据加载到缓存中，并在缓存中进行修改。")]),_._v(" "),v("p",[_._v("这样可以利用缓存来加速写操作，避免频繁地访问主存。")]),_._v(" "),v("p",[_._v("优点：提高了写操作的性能，减少了对主存的访问次数。")]),_._v(" "),v("p",[_._v("缺点：会消耗更多的缓存空间，因为要将数据加载到缓存中。")]),_._v(" "),v("p",[_._v("**   （4）"),v("strong",[v("strong",[_._v("非**写分配法（写不命中时）")])])]),_._v(" "),v("p",[_._v("不写分配策略在发生写操作时，直接更新主存，而不将数据加载到缓存中。")]),_._v(" "),v("p",[_._v("只有当相应的数据已经在缓存中时，才进行写操作。")]),_._v(" "),v("p",[_._v("优点：减少了不必要的数据加载和缓存内部的写操作。")]),_._v(" "),v("p",[_._v("缺点：可能增加主存访问次数，降低了写操作的性能。")]),_._v(" "),v("h3",{attrs:{id:"_10-简述一下指令执行的过程。★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-简述一下指令执行的过程。★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("10. 简述一下指令执行的过程。★★")])])]),_._v(" "),v("p",[_._v("下面以取数指令（即将指令地址码指示的存储单元中的操作数取出后送至运算器的 ACC 中）为例进行说明。")]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("取指令：PC->MAR->M->MDR->IR")])])]),_._v(" "),v("p",[_._v("根据 PC 取指令到 IR，将 PC 的内容送 MAR，MAR 中的内容直接送地址线，同时控制器将读信号送读／写信号线，主存根据地址线上的地址和读信号，从指定存储单元读出指令，送到数据线上，MDR 从数据线接收指令信息，并传送到 IR 中。")]),_._v(" "),v("p",[_._v("（2）"),v("strong",[v("strong",[_._v("分析指令：OP(IR)->CU")])])]),_._v(" "),v("p",[_._v("指令译码并送出控制信号。控制器根据 IR 中指令的操作码，生成相应的控制信号，送到不同的执行部件。在本例中，"),v("strong",[v("strong",[_._v("IR 中是取数指令")])]),_._v("，因此读控制信号被送到总线的控制线上。")]),_._v(" "),v("p",[_._v("（3）"),v("strong",[v("strong",[_._v("执行指令：Ad(IR)->MAR->M->MDR->ACC")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("取数操作")])]),_._v("。将 IR 中指令的地址码送 MAR，MAR 中的内容送地址线，同时控制器将读信号送读／写信号线从主存指定存储单元读出操作数，并通过数据线送至 MDR，再传送到 ACC 中。")]),_._v(" "),v("h3",{attrs:{id:"_11-说说-cpu-的功能。★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-说说-cpu-的功能。★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("11. 说说 CPU 的功能。★★")])])]),_._v(" "),v("p",[_._v("CPU 由运算器和控制器组成。其中，控制器的功能是负责协调并控制计算机各部件执行程序的指令序列，包括取指令、分析指令和执行指令；运算器的功能是对数据进行加工。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("CPU 的具体功能包括:")])])]),_._v(" "),v("p",[_._v("（1）指令控制。完成取指令、分析指令和执行指令的操作，即程序的顺序控制。")]),_._v(" "),v("p",[_._v("（2）操作控制。一条指令的功能往往由若干操作信号的组合来实现。CPU 管理并产生由内存取出每条指令的操作信号，把各种操作信号送往相应的部件，从而控制这些部件按指令的要求进行动作。")]),_._v(" "),v("p",[_._v("（3）时间控制。对各种操作加以时间上的控制。时间控制要为每条指令按时间顺序提供应有的控制信号。")]),_._v(" "),v("p",[_._v("（4）数据加工。对数据进行算术和逻辑运算。")]),_._v(" "),v("p",[_._v("（5）中断处理。对计算机运行过程中出现的异常情况和特殊请求进行处理。")]),_._v(" "),v("h3",{attrs:{id:"_12-影响流水线性能的因素。★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-影响流水线性能的因素。★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("12. 影响流水线性能的因素。★★★")])])]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("结构相关")])])]),_._v(" "),v("p",[_._v("是当多条指令同一时刻争用同一资源形成冲突。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("解决方案：")])])]),_._v(" "),v("p",[_._v("①暂停一个时钟周期")]),_._v(" "),v("p",[_._v("②单独设置数据存储器和指令存储器")]),_._v(" "),v("p",[_._v("（2）"),v("strong",[v("strong",[_._v("数据相关")])])]),_._v(" "),v("p",[_._v("是指令在流水线中重叠执行时，当后继指令需要用到前面指令的执行结果时发生的。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("解决方案：")])])]),_._v(" "),v("p",[_._v("①暂停一个时钟周期")]),_._v(" "),v("p",[_._v("②数据旁路：把前一条指令的 ALU 计算结果直接输入到下一条指令")]),_._v(" "),v("p",[_._v("（3）"),v("strong",[v("strong",[_._v("控制相关")])])]),_._v(" "),v("p",[_._v("是当流水线遇到分支指令和其他改变 PC 值的指令时引起的。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("解决方案：")])])]),_._v(" "),v("p",[_._v("①延迟转移技术。将转移指令与其前面的与转移指令无关的一条或几条指令对换位置，让成功转移总是在紧跟的指令被执行之后发生，从而使预取的指令不作废。")]),_._v(" "),v("p",[_._v("②转移预测技术。")]),_._v(" "),v("h3",{attrs:{id:"_13-说说-cisc-和-risc-的区别。★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-说说-cisc-和-risc-的区别。★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("13. 说说 CISC 和 RISC 的区别。★★★")])])]),_._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://i-blog.csdnimg.cn/direct/a08bac6aef3e42e9b5fc42ee6260e4a9.png",loading:"lazy"}})]),_._v(" "),v("h3",{attrs:{id:"_14-解释一下指令周期和时钟周期。★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-解释一下指令周期和时钟周期。★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("14. 解释一下指令周期和时钟周期。★★★")])])]),_._v(" "),v("p",[_._v("指令周期是指完成一条指令的基本操作所需要的时间，也称为执行周期或机器周期。在经典的冯 · 诺伊曼计算机结构中，一个指令周期通常包括以下几个阶段：取指、译码、执行、存储器访问、写回。")]),_._v(" "),v("p",[_._v("时钟周期是计算机内部时钟震荡器发出一个完整的周期所需的时间。")]),_._v(" "),v("p",[_._v("指令周期是由若干个时钟周期组成的，每个阶段在不同的时钟周期中执行。每个时钟周期都是固定且稳定的，它们共同构成了整个指令周期。")]),_._v(" "),v("h3",{attrs:{id:"_15-介绍一下-io-方式。★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-介绍一下-io-方式。★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("15. 介绍一下 IO 方式。★★★★")])])]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("程序查询方式")])])]),_._v(" "),v("p",[_._v("程序查询方式的核心问题是每时每刻需要不断查询 I/O 设备是否准备好，浪费了 CPU 大量的时间。")]),_._v(" "),v("p",[_._v("（2）"),v("strong",[v("strong",[_._v("程序中断方式")])])]),_._v(" "),v("p",[_._v("是在一条指令执行完成后检查是否有中断发生，若出现中断则处理，否则继续执行下一条指令。")]),_._v(" "),v("p",[_._v("（3）"),v("strong",[v("strong",[_._v("DMA 方式")])])]),_._v(" "),v("p",[_._v("DMA 方式是指外部设备不通过 CPU 而直接与主存进行数据交换的方式。DMA 控制器发出请求，CPU 让出系统总线由 DMA 接管，让外设可以直接访问内存，这样外设的读写就不需要 CPU 参与，降低了 CPU 的占用率。")]),_._v(" "),v("p",[_._v("（4）"),v("strong",[v("strong",[_._v("通道方式")])])]),_._v(" "),v("p",[_._v("通道方式是构建一个通道，主存和 I/O 设备之间的数据交换通过通道来完成，通道方式是对 DMA 的发展，由一个数据块的读写发展成为一组数据块的处理。")]),_._v(" "),v("h3",{attrs:{id:"_16-介绍一下-dma-技术。★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-介绍一下-dma-技术。★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("16. 介绍一下 DMA 技术。★★★★")])])]),_._v(" "),v("p",[_._v("DMA 是 Direct Memory Access（直接内存访问）的缩写。通过使用 DMA，设备可以直接读取和写入系统内存，而无需通过 CPU 进行中介。这种方式可以提高数据传输的效率和系统的性能。")]),_._v(" "),v("p",[_._v("在传统的 I/O 操作中，CPU 负责处理数据的传输。当设备需要读取或写入数据时，它会发出中断请求，使 CPU 中断并处理相应的 I/O 操作。这种方式效率较低，因为每次传输都需要占用 CPU 的时间和资源。")]),_._v(" "),v("p",[_._v("而使用 DMA 技术，设备可以直接与系统内存进行通信，而无需通过 CPU 的干预。DMA 控制器负责管理数据传输的过程。它通过在总线上请求总线的控制权，将设备与系统内存连接起来，并直接在两者之间完成数据的传输。这样可以减轻 CPU 的负担，提高数据传输的速度和效率。")]),_._v(" "),v("p",[_._v("DMA 广泛应用于各种设备，如硬盘驱动器、网络适配器、声卡、显卡等。它可以提高存储设备的读写速度，加快网络传输速度，改善音频和视频的播放效果等。同时，DMA 也使得 CPU 能够更好地专注于执行其他任务，提高系统的整体性能。")]),_._v(" "),v("p",[_._v("总之，DMA 是一种通过直接访问内存来实现设备之间高速数据传输的技术，可以提高系统性能和数据传输效率。")]),_._v(" "),v("h3",{attrs:{id:"_17-什么是总线-总线有什么好处-总线有什么功能-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-什么是总线-总线有什么好处-总线有什么功能-★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("17. 什么是总线？总线有什么好处？总线有什么功能？★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("总线：")])])]),_._v(" "),v("p",[_._v("总线是指计算机系统中连接各个硬件组件的物理通道或逻辑通道。总线可以传输数据、地址和控制信号，允许不同的设备之间进行通信和交换信息。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("好处：")])])]),_._v(" "),v("p",[_._v("（1）简化硬件设计：总线提供了一种标准化的接口和通信方式，使得硬件设计变得更加简单和灵活。设备可以通过总线连接到系统，而不需要与每个设备直接连接。")]),_._v(" "),v("p",[_._v("（2）提高可扩展性：总线允许在计算机系统中添加或移除设备，以满足不同的需求。通过总线，可以轻松地连接新设备，而无需对整个系统进行重大改动。")]),_._v(" "),v("p",[_._v("（3）实现设备间的通信：总线提供了设备之间进行数据和信号交换的通道。不同的设备可以通过总线发送和接收数据，实现彼此之间的通信和协作。")]),_._v(" "),v("p",[_._v("（4）节省成本和资源：使用总线可以减少硬件的复杂性和成本。它可以共享信号线和通信资源，减少了系统所需的电路板空间和连接线数量。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("功能：")])])]),_._v(" "),v("p",[_._v("（1）数据传输：总线用于在不同的设备之间传输数据。它提供了数据线路，使得设备能够发送和接收数据。")]),_._v(" "),v("p",[_._v("（2）地址传输：总线可以传输地址信息，指示数据在内存中的位置或设备的寻址方式。")]),_._v(" "),v("p",[_._v("（3）控制信号传输：总线传递控制信号，用于启动、停止、同步和调度数据传输。")]),_._v(" "),v("p",[_._v("（4）中断传输：总线还可以传输中断信号，以通知 CPU 需要处理的事件或请求。")]),_._v(" "),v("h3",{attrs:{id:"_18-介绍一下磁盘阵列。★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-介绍一下磁盘阵列。★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("18. 介绍一下磁盘阵列。★★★")])])]),_._v(" "),v("p",[_._v("磁盘阵列，也称为 RAID，是将多个独立的硬盘驱动器组合在一起，形成一个单独的存储单元。磁盘阵列通过在多个硬盘驱动器上分布和复制数据，提供了数据冗余、容错性、高性能和扩展性。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("常见的磁盘阵列级别：")])])]),_._v(" "),v("p",[_._v("RAID 0：RAID 0 没有冗余功能，一块磁盘损坏会导致所有数据丢失。")]),_._v(" "),v("p",[_._v("RAID 1：镜像（Mirroring），所有数据同时写入两个磁盘，提供数据冗余和高可靠性。当一个磁盘发生故障时，另一个磁盘仍然可以正常工作。")]),_._v(" "),v("p",[_._v("RAID 5：分布式奇偶校验，将数据和校验信息分散存储在多个磁盘上，提供数据冗余和较高的读取性能。当一个磁盘出现故障时，可以通过校验信息和其他磁盘上的数据进行恢复。")]),_._v(" "),v("p",[_._v("RAID 6：双分布式奇偶校验，与 RAID 5 类似，但使用两个奇偶校验块提供更高的容错能力。即使同时发生两个磁盘故障，数据仍然可以恢复。")]),_._v(" "),v("h3",{attrs:{id:"_19-在计算机所有组成部分中-哪些部分的性能会影响大批量图像输入的效率-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-在计算机所有组成部分中-哪些部分的性能会影响大批量图像输入的效率-★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("19. 在计算机所有组成部分中，哪些部分的性能会影响大批量图像输入的效率？★★★")])])]),_._v(" "),v("p",[_._v("（1）CPU（中央处理器）：CPU 的性能对于图像处理是至关重要的。高性能的多核 CPU 可以提供更快的图像处理速度和并行计算能力。")]),_._v(" "),v("p",[_._v("（2）GPU（图形处理器）：在图像处理中，GPU 可以加速大规模并行计算，例如图像的特征提取、滤波和深度学习等任务。具备高性能 GPU 的计算机能够快速处理大量的图像数据。")]),_._v(" "),v("p",[_._v("（3）内存：大批量图像输入通常需要占用大量内存空间。有足够的 RAM 可以避免频繁的磁盘读取和写入操作，提高图像处理的效率。")]),_._v(" "),v("p",[_._v("（4）硬盘 / 存储：存储速度对于读取和写入大批量图像数据非常重要。使用高速硬盘（如 SSD）或者专门的存储系统可以减少 I/O 延迟，提高数据的读写速度。")]),_._v(" "),v("p",[_._v("（5）网络带宽：如果大批量图像输入涉及到网络传输，那么网络带宽将成为一个关键因素。具有高速、稳定的网络连接可以提高图像传输的速度和效率。")]),_._v(" "),v("p",[_._v("（6）图像处理算法和软件优化：除了硬件性能外，优化图像处理算法和软件实现也是提高效率的关键。使用高效的算法和进行针对性的软件优化可以更好地利用硬件资源，提高图像处理的速度和效果。")]),_._v(" "),v("p",[_._v("原文链接："),v("a",{attrs:{href:"https://blog.csdn.net/m0_53140426/article/details/140252565",target:"_blank",rel:"noopener noreferrer"}},[_._v("计算机保研/考研面试题——计算机组成原理篇_计算机组成原理保研复习-CSDN博客"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=s.exports}}]);