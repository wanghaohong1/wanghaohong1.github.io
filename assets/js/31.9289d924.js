(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{327:function(_,v,t){"use strict";t.r(v);var s=t(4),r=Object(s.a)({},(function(){var _=this,v=_._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("h1",{attrs:{id:"数据库基础篇"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#数据库基础篇"}},[_._v("#")]),_._v(" "),v("strong",[_._v("数据库基础篇")])]),_._v(" "),v("blockquote",[v("p",[_._v("下面是笔者对于"),v("strong",[_._v("数据库基础")]),_._v("知识点一些总结，对于"),v("strong",[_._v("保研和考研")]),_._v("均适用，对找工作的同学也有一定参考作用。")])]),_._v(" "),v("h3",{attrs:{id:"_1-数据库系统-dbs-和数据库管理系统-dbms-的区别是什么-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-数据库系统-dbs-和数据库管理系统-dbms-的区别是什么-★★★"}},[_._v("#")]),_._v(" 1. "),v("strong",[v("strong",[_._v("数据库系统 DBS 和数据库管理系统 DBMS 的区别是什么？★★★")])])]),_._v(" "),v("p",[_._v("数据库系统是指由数据库、数据库管理系统和应用程序组成的数据管理系统。它是为了有效地组织、存储、管理和检索大量数据而设计的软件系统。")]),_._v(" "),v("p",[_._v("数据库管理系统是一种软件系统，用于管理数据库中的数据。它提供了一组操作数据库的工具和接口，允许用户定义、创建、修改和查询数据库中的数据。")]),_._v(" "),v("h3",{attrs:{id:"_2-数据库系统的三级模式结构是什么-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-数据库系统的三级模式结构是什么-★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("2. 数据库系统的三级模式结构是什么？★★★")])])]),_._v(" "),v("p",[v("img",{staticClass:"lazy",attrs:{alt:"","data-src":"https://i-blog.csdnimg.cn/direct/3aa8e649b15a4737bf3b15961d6a2145.png",loading:"lazy"}})]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("（1）外模式")])])]),_._v(" "),v("p",[_._v("也称子模式或用户模式，它是数据库用户能够看见和使用的局部数据的逻辑结构和特征的描述，是数据库用户的数据视图，是与某一应用有关的数据的逻辑表示。一个数据库可以有多个外模式。数据库管理系统提供外模式数据定义语言（外模式 DDL）来严格定义外模式。")]),_._v(" "),v("p",[v("strong",[_._v("（2）模式")])]),_._v(" "),v("p",[_._v("也称逻辑模式，是数据库的全局逻辑结构和组织方式的描述。模式定义了数据库中所有数据的完整视图，包括实体、关系、属性以及它们之间的联系。模式层面上描述了数据库的总体逻辑结构，是所有用户和应用程序共享的数据库抽象模型。一个数据库只有一种模式。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("（3）内部模式")])])]),_._v(" "),v("p",[_._v("也称为存储模式或物理模式，是数据库在物理存储介质上的实际存储方式和组织结构的描述。内部模式定义了数据在磁盘或其他存储介质上的存储格式、索引方式、数据分布方式等信息。内部模式侧重于数据库的物理实现细节，供数据库管理系统使用。")]),_._v(" "),v("h3",{attrs:{id:"_3-简述数据库系统的特点。-★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-简述数据库系统的特点。-★★"}},[_._v("#")]),_._v(" ****3. 简述数据库系统的特点。****"),v("strong",[v("strong",[_._v("★★")])])]),_._v(" "),v("p",[_._v("（1）数据结构化；")]),_._v(" "),v("p",[_._v("（2）数据的共享性高，冗余度低，易扩充；")]),_._v(" "),v("p",[_._v("（3）数据独立性高；")]),_._v(" "),v("p",[_._v("（4）数据由 DBM 统一管理和控制。")]),_._v(" "),v("h3",{attrs:{id:"_4-数据库管理系统的主要功能有哪些-★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-数据库管理系统的主要功能有哪些-★★"}},[_._v("#")]),_._v(" ****4. 数据库管理系统的主要功能有哪些？****"),v("strong",[v("strong",[_._v("★★")])])]),_._v(" "),v("p",[_._v("（1）数据的安全性保护")]),_._v(" "),v("p",[_._v("（2）数据的完整性保护")]),_._v(" "),v("p",[_._v("（3）并发控制")]),_._v(" "),v("p",[_._v("（4）数据库恢复")]),_._v(" "),v("h3",{attrs:{id:"_5-什么叫数据与程序的物理独立性-什么叫数据与程序的逻辑独立性-为什么数据库系统具有数据与程序的独立性-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-什么叫数据与程序的物理独立性-什么叫数据与程序的逻辑独立性-为什么数据库系统具有数据与程序的独立性-★★★"}},[_._v("#")]),_._v(" 5. "),v("strong",[_._v("什么叫数据与程序的物理独立性？什么叫数据与程序的逻辑独立性？为什么数据库系统具有数据与程序的独立性？★★★")])]),_._v(" "),v("p",[_._v("物理独立性：是指用户的应用程序与存储在磁盘上的数据库中数据是相互独立的。")]),_._v(" "),v("p",[_._v("逻辑独立性：是指用户的应用程序与数据的逻辑结构是相互独立的，也就是说，数据的逻辑结构改变了，用户程序也可以不变。")]),_._v(" "),v("p",[_._v("为什么：数据独立性是由 DBMS 的二级映像功能来保证的（外模式 / 模式映像，模式 / 内模式映像），这两层映像机制保证了数据库系统中数据的逻辑独立性和物理独立性。")]),_._v(" "),v("h3",{attrs:{id:"_6-笛卡尔积和自然连接的区别。-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-笛卡尔积和自然连接的区别。-★★★"}},[_._v("#")]),_._v(" ****6. 笛卡尔积和自然连接的区别。****"),v("strong",[v("strong",[_._v("★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("笛卡尔积")])])]),_._v(" "),v("p",[_._v("笛卡尔积是一个基本的集合操作，它将两个或多个表中的所有行组合在一起，生成一个包含所有可能组合的结果集。在笛卡尔积中，每个表的每一行都与其他表的每一行进行组合，并生成新的行。结果集的行数等于每个表的行数乘积。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("自然连接")])])]),_._v(" "),v("p",[_._v("自然连接是基于两个或多个表中相同列名的列进行连接操作。它将这些相同列名的列作为连接条件，自动找到两个表中相应列值相等的行，并将它们组合在一起形成结果集。自然连接省略了连接条件的指定，只要对应列名相同，就会自动匹配。自然连接可以更方便地进行表之间的关联操作，无需显式指定连接条件，但需要特别注意列名的一致性。")]),_._v(" "),v("h3",{attrs:{id:"_7-什么是视图-视图有什么优点-视图什么时候是不可更新的-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7-什么是视图-视图有什么优点-视图什么时候是不可更新的-★★★"}},[_._v("#")]),_._v(" ****7. 什么是视图？****"),v("strong",[v("strong",[_._v("视图有什么优点？视图什么时候是不可更新的？★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("视图")])])]),_._v(" "),v("p",[_._v("是从一个或多个基本表（也可能包括其他视图）中检索出的虚拟表，它本身不存储数据。视图可以看作是基于基本表的查询结果集的临时表。通过定义视图，我们可以以更方便、更简洁的方式获取特定的数据子集，而无需每次都编写复杂的查询语句。视图可以进行查询操作，但不能直接进行数据修改。视图的定义存储在数据库中。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("优点：")])])]),_._v(" "),v("p",[_._v("（1）视图能够简化用户的操作")]),_._v(" "),v("p",[_._v("（2）视图使用户能以多种角度看待同一数据")]),_._v(" "),v("p",[_._v("（3）视图对重构数据库提供了一定程度的逻辑独立性")]),_._v(" "),v("p",[_._v("（4）视图能够对机密数据提供安全保护")]),_._v(" "),v("p",[_._v("（5）适当的利用视图可以更清晰的表达查询")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("不可更新的视图：")])])]),_._v(" "),v("p",[_._v("（1）若视图是由两个以上基表导出的，此视图不允许更新")]),_._v(" "),v("p",[_._v("（2）若视图的字段来自字段表达式或常数，则不允许对此视图执行 INSERT 和 UPDATES 作，但允许 DELETE 操作")]),_._v(" "),v("p",[_._v("（3）若视图的字段来自聚集函数，则此视图不允许更新")]),_._v(" "),v("p",[_._v("（4）若视图定义中含有 GROUP BY 子句，则此视图不允许更新")]),_._v(" "),v("p",[_._v("（5）若视图定义中含有 DISTINCT 短语，则此视图不允许更新")]),_._v(" "),v("p",[_._v("（6）若视图定义中有嵌套查询，并且内层查询的 FROM 子句中涉及的表也是导出该视图的基本表，则此视图不允许更新")]),_._v(" "),v("p",[_._v("（7）一个不允许更新的视图上定义的视图也不允许更新")]),_._v(" "),v("h3",{attrs:{id:"_8-关系数据库的完整性规则有哪几类-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8-关系数据库的完整性规则有哪几类-★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("8. 关系数据库的完整性规则有哪几类？★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("（1）实体完整性")])])]),_._v(" "),v("p",[_._v("实体完整性要求每个表中的主键必须具有唯一性和非空性。也就是说，表中的每个实体必须能够被唯一地标识，并且主键列不能包含空值。")]),_._v(" "),v("p",[_._v("** （2）"),v("strong",[v("strong",[_._v("参照完整**性")])])]),_._v(" "),v("p",[_._v("参照完整性是指在两个表之间建立外键关系时，要求引用表中的外键必须与被引用表中的主键值相匹配。也就是说，如果一个表中的外键引用了另一个表中的某个主键值，那么被引用的主键值必须存在于被引用表中。")]),_._v(" "),v("p",[v("strong",[_._v("（3）****用户定")]),_._v("义的完整性****")]),_._v(" "),v("p",[_._v("用户定义的完整性规则是根据具体业务需求而定义的规则。这些规则可通过触发器、自定义约束或存储过程等方式实现。例如，限制某个字段的取值范围、检查复杂的业务逻辑规则等。")]),_._v(" "),v("h3",{attrs:{id:"_9-什么是触发器-触发器什么时候会触发-触发器的作用是什么-★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_9-什么是触发器-触发器什么时候会触发-触发器的作用是什么-★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("9. 什么是触发器？触发器什么时候会触发？触发器的作用是什么？★★★★")])])]),_._v(" "),v("p",[v("strong",[_._v("（1）触发器：")])]),_._v(" "),v("p",[_._v("触发器是与表有关的数据库对象，在满足预定义的条件时会被触发，从而执行触发器中定义的语句集合。")]),_._v(" "),v("p",[v("strong",[_._v("（2）"),v("strong",[v("strong",[_._v("触发条件")]),_._v("：")])])]),_._v(" "),v("p",[_._v("在数据库进行数据变更的时候，触发器可以被触发。即对数据表进行插入、删除、修改数据的时候，可以执行触发器。触发器定义在表上，也依附于表存在。触发器可以在数据表变更进行前执行，也可能在变更进行后执行。触发器对于每一行都会被执行。")]),_._v(" "),v("p",[v("strong",[_._v("（3）****触发器")]),_._v("作用：****")]),_._v(" "),v("p",[_._v("强制数据完整性：触发器可以用于强制实施数据完整性规则。例如，当插入或修改表中的数据时，触发器可以检查数据的有效性并拒绝不符合规定的操作。")]),_._v(" "),v("p",[_._v("数据验证和转换：触发器可以对即将插入、更新或删除的数据进行验证和转换。例如，在插入数据之前，触发器可以验证是否满足某些条件，或者在插入数据之后，触发器可以对数据进行后处理操作。")]),_._v(" "),v("p",[_._v("日志记录和审计：触发器可以用于记录数据操作的日志或进行审计跟踪。例如，在数据更新之后，触发器可以将旧值和新值记录到审计表中，以便后续分析和审计目的。")]),_._v(" "),v("p",[_._v("自动化业务逻辑：触发器可以用于执行复杂的业务逻辑。例如，在某个表上进行插入操作时，触发器可以自动在其他相关表上进行相应的更新操作，以保持数据的一致性。")]),_._v(" "),v("h3",{attrs:{id:"_10-简述一下第一范式、第二范式、第三范式、bc-范式、第四范式-。-★★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_10-简述一下第一范式、第二范式、第三范式、bc-范式、第四范式-。-★★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("10. 简述一下第一范式、第二范式、第三范式、BC 范式、第四范式")])]),_._v("****。****"),v("strong",[v("strong",[_._v("★★★★★")])])]),_._v(" "),v("p",[_._v("范式是数据库设计中用于消除数据冗余和提高数据存储效率的一种规范化方法。")]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("第一范式（1NF）")])])]),_._v(" "),v("p",[_._v("属性是不可分割的最小单元，即不会有重复的列，体现原子性。")]),_._v(" "),v("p",[_._v("（2）"),v("strong",[v("strong",[_._v("第二范式（2NF）")])])]),_._v(" "),v("p",[_._v("满足 1NF 前提下，存在一个候选码，非主属性全部依赖该候选码，即存在主键，体现唯一性。总之，就是消除部分函数依赖。（ps：完全函数依赖指的是缺一不可，部分函数依赖可以去掉左边的某个属性仍然可以推出右边的属性）")]),_._v(" "),v("p",[_._v("（3）"),v("strong",[v("strong",[_._v("第三范式（3NF）")])])]),_._v(" "),v("p",[_._v("满足 2NF 前提下，非主属性必须互不依赖，消除传递依赖。")]),_._v(" "),v("p",[_._v("（4）"),v("strong",[v("strong",[_._v("BC 范式")])])]),_._v(" "),v("p",[_._v("在满足第三范式的基础上，确保表中的每个非主属性都完全依赖于每个候选码。总之，就是每一个决定属性因素都包含码。")]),_._v(" "),v("p",[_._v("（5）"),v("strong",[v("strong",[_._v("第四范式（4NF）")])])]),_._v(" "),v("p",[_._v("在满足 BC 范式的基础上，通过进一步拆分表来处理多值依赖问题。多值依赖指的是当一个非主键字段的值依赖于其他非主键字段的多个值时，应将其拆分成独立的表。")]),_._v(" "),v("h3",{attrs:{id:"_11-什么是事务-事务的-acid-特性是什么-如何保证-acid-特性-★★★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_11-什么是事务-事务的-acid-特性是什么-如何保证-acid-特性-★★★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("11. 什么是事务？事务的 ACID 特性是什么？如何保证 ACID 特性？★★★★★★")])])]),_._v(" "),v("p",[_._v("事务是用户定义的一个数据库操作序列，这些操作要么全做要么全不做，是一个不可分割的工作单位。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("事务的 ACID 性质")])])]),_._v(" "),v("p",[_._v("（1）原子性（"),v("strong",[_._v("A")]),_._v("tomicity）：事务是一个原子操作单元，要么全部执行成功，要么全部回滚到事务开始之前的状态。如果在事务执行过程中发生错误，所有已执行的操作都会被撤销，数据库会恢复到事务开始之前的状态。")]),_._v(" "),v("p",[_._v("（2）一致性（"),v("strong",[_._v("C")]),_._v("onsistency）：事务在执行前后，数据库必须满足所有预定义的一致性规则。这意味着事务在执行过程中，不能违反数据库的完整性约束和业务规则。")]),_._v(" "),v("p",[_._v("（3）隔离性（"),v("strong",[_._v("I")]),_._v("solation）：事务的隔离性规定多个事务并发执行时，每个事务都必须与其他事务相互隔离，互不干扰。这样可以确保并发执行的事务不会相互影响，避免了数据的不一致和并发访问引起的问题。")]),_._v(" "),v("p",[_._v("（4）持久性（"),v("strong",[_._v("D")]),_._v("urability）：一旦事务被提交，其所做的修改将永久保存到数据库中，并且对于后续的数据库操作和系统故障都是持久的。即使在系统崩溃或断电后，数据库也应该能够恢复到事务提交的状态。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("如何保证 ACID 性质")])])]),_._v(" "),v("p",[_._v("（1）通过实现事务管理器来处理事务的执行、提交和回滚，以保证原子性和一致性。")]),_._v(" "),v("p",[_._v("（2）使用锁机制和并发控制算法来控制事务之间的相互干扰，以确保隔离性。")]),_._v(" "),v("p",[_._v("（3）将事务操作记录在事务日志中，并使用恢复和重做机制来保证持久性。")]),_._v(" "),v("p",[_._v("（4）设计合理的数据库模式和应用程序逻辑来确保一致性。")]),_._v(" "),v("h3",{attrs:{id:"_12-什么是封锁-基本的封锁类型有几种-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_12-什么是封锁-基本的封锁类型有几种-★★★"}},[_._v("#")]),_._v(" ****12. 什么是封锁？基本的封锁类型有几种？****"),v("strong",[v("strong",[_._v("★★★")])])]),_._v(" "),v("p",[_._v("在数据库中，锁是用于控制对数据库对象（如表、行、页等）进行并发访问的机制。通过使用锁，可以确保数据库操作的正确性和一致性。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("类型：")])])]),_._v(" "),v("p",[_._v("共享锁：也称为读锁，多个事务可以同时持有共享锁，并且可以并发地读取被锁定对象的数据，但不能修改或写入数据。共享锁之间不互斥，不会阻塞其他共享锁的获取。")]),_._v(" "),v("p",[_._v("排他锁：也称为写锁，只能由一个事务持有，它阻塞其他事务对被锁定对象进行读取或修改操作。排他锁可以保证事务对被锁定对象的独占性访问，以便进行数据的修改。")]),_._v(" "),v("h3",{attrs:{id:"_13-在数据库中为什么要并发控制-并发控制技术可以保证事务的哪些特征-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_13-在数据库中为什么要并发控制-并发控制技术可以保证事务的哪些特征-★★★"}},[_._v("#")]),_._v(" ****13. 在数据库中为什么要并发控制？并发控制技术可以保证事务的哪些特征？****"),v("strong",[v("strong",[_._v("★★★")])])]),_._v(" "),v("p",[_._v("数据库是共享资源，通常有许多个事务同时在运行。当多个事务并发地存取数据库时就会产生同时读取或修改同一数据的情况。 若对并发操作不加控制就可能会存取和存储不正确的数据，破坏数据库的一致性。")]),_._v(" "),v("p",[_._v("并发控制技术能够保证事务的 ACID 特性。")]),_._v(" "),v("h3",{attrs:{id:"_14-简述并发操作带来的三类数据不一致性。★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_14-简述并发操作带来的三类数据不一致性。★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("14. 简述并发操作带来的三类数据不一致性。★★★★")])])]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("丢失修改")])])]),_._v(" "),v("p",[_._v("当多个事务同时对同一个数据项进行修改时，由于并发执行的无序性，可能导致某些事务的更新被"),v("strong",[v("strong",[_._v("覆盖或丢失")])]),_._v("。例如，事务 A 和事务 B 同时读取数据 X，然后分别进行修改，并提交更新。如果事务 B 的修改操作覆盖了事务 A 的修改结果，那么事务 A 的更新就会丢失。")]),_._v(" "),v("p",[_._v("（2）"),v("strong",[v("strong",[_._v("不可重复读")])])]),_._v(" "),v("p",[_._v("当一个事务在相同的查询中多次读取同一行数据，但在此期间，其他事务对该行进行了修改或删除，导致每次读取的结果不一致。例如，事务 A 读取数据 X 的值，然后事务 B 修改了数据 X 并提交，接着事务 A 再次读取数据 X，得到的结果与之前不一样。")]),_._v(" "),v("p",[_._v("（3）"),v("strong",[v("strong",[_._v("读脏数据")])])]),_._v(" "),v("p",[_._v("当一个事务读取到另一个未提交事务的数据时，称为读脏数据。例如，事务 A 修改了数据 X，但还没有提交，此时事务 B 读取了数据 X，得到的是事务 A 未提交的修改结果。如果事务 A 最终回滚（即不提交），那么事务 B 读取到的数据就是无效的，造成了数据不一致的情况。")]),_._v(" "),v("h3",{attrs:{id:"_15-简述两段封锁协议的内容。★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_15-简述两段封锁协议的内容。★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("15. 简述两段封锁协议的内容。★★★")])])]),_._v(" "),v("p",[_._v("指所有事务必须分两个阶段对数据项加锁和解锁。")]),_._v(" "),v("p",[_._v("（1）在对任何数据进行读、写操作之前，事务首先要获得对该数据的封锁")]),_._v(" "),v("p",[_._v("（2）在释放一个封锁之后，事务不再申请和获得任何其他封锁")]),_._v(" "),v("h3",{attrs:{id:"_16-什么叫做数据库的恢复-数据库恢复的基本技术有哪些-★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_16-什么叫做数据库的恢复-数据库恢复的基本技术有哪些-★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("16. 什么叫做数据库的恢复？数据库恢复的基本技术有哪些？")])]),_._v(" "),v("strong",[v("strong",[_._v("★★")])])]),_._v(" "),v("p",[_._v("数据库恢复是指通过技术手段，将保存在数据库中上丢失的电子数据进行抢救和恢复的技术。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("技术：")])])]),_._v(" "),v("p",[_._v("（1）数据转储")]),_._v(" "),v("p",[_._v("转储是指 DBA 将整个数据库复制到磁带或另一个磁盘上保存起来的过程，备用的数据称为后备副本或后援副本")]),_._v(" "),v("p",[_._v("（2）登录日志文件")]),_._v(" "),v("h3",{attrs:{id:"_17-简述数据库系统中可能发生的故障类型-以及数据恢复方法。-★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_17-简述数据库系统中可能发生的故障类型-以及数据恢复方法。-★★★"}},[_._v("#")]),_._v(" ****17. 简述数据库系统中可能发生的故障类型，以及数据恢复方法。****"),v("strong",[v("strong",[_._v("★★★")])])]),_._v(" "),v("p",[v("strong",[_._v("（1）事务内部的故障")])]),_._v(" "),v("p",[_._v("指的是单个事务执行过程中发生的错误或异常。例如，事务逻辑错误、约束冲突、死锁等。")]),_._v(" "),v("p",[_._v("****恢复方法：****由恢复子系统应利用日志文件撤消（UNDO）此事务已对数据库进行的修改。")]),_._v(" "),v("p",[v("strong",[_._v("（2）系统故障")])]),_._v(" "),v("p",[_._v("称为软故障，是指造成系统停止运转的任何事件，使得系统要重新启动。")]),_._v(" "),v("p",[_._v("①发生系统故障时，事务未提交")]),_._v(" "),v("p",[_._v("****恢复方法：****强行撤消（UNDO）所有未完成事务")]),_._v(" "),v("p",[_._v("②发生系统故障时，事务已提交，但缓冲区中的信息尚未完全写回到磁盘上。")]),_._v(" "),v("p",[_._v("****恢复方法：****重做（REDO）所有已提交的事务")]),_._v(" "),v("p",[v("strong",[_._v("（3）介质故障")])]),_._v(" "),v("p",[_._v("称为硬故障，指的是存储介质（如硬盘）出现故障导致数据丢失或损坏。")]),_._v(" "),v("p",[_._v("****恢复方法：****装入数据库发生介质故障前某个时刻的数据副本；重做自此时始的所有成功事务，将这些事务已提交的结果重新记入数据库")]),_._v(" "),v("p",[v("strong",[_._v("（4）计算机病毒")])]),_._v(" "),v("p",[_._v("指的是恶意软件对数据库系统的破坏。")]),_._v(" "),v("p",[_._v("****恢复方法：****包括使用杀毒软件清除病毒，并通过备份恢复受感染的数据。")]),_._v(" "),v("h3",{attrs:{id:"_18-什么是索引-请简述索引的几种类型或分类。★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_18-什么是索引-请简述索引的几种类型或分类。★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("18. 什么是索引？请简述索引的几种类型或分类。★★★★")])])]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("索引")])])]),_._v(" "),v("p",[_._v("索引是对数据库表中一列或多列的值进行排序的数据结构，用于快速访问数据库表中的特定信息。")]),_._v(" "),v("p",[v("strong",[v("strong",[_._v("分类")])])]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("从物理结构上可以分为聚簇索引和非聚集索引两类")])])]),_._v(" "),v("p",[_._v("聚簇索引指索引的键值的逻辑顺序与表中相应行的物理顺序一致，即每张表只能有一个聚簇索引，也就是我们常说的主键索引；")]),_._v(" "),v("p",[_._v("非聚簇索引的逻辑顺序则与数据行的物理顺序不一致。")]),_._v(" "),v("p",[_._v("（2）"),v("strong",[v("strong",[_._v("从应用上可以划分为一下几类：")])])]),_._v(" "),v("p",[_._v("普通索引：MySQL 中的基本索引类型，没有什么限制，允许在定义索引的列中插入重复值和空值，纯粹为了提高查询效率。")]),_._v(" "),v("p",[_._v("唯一索引：索引列中的值必须是唯一的，但是允许为空值。")]),_._v(" "),v("p",[_._v("主键索引：特殊的唯一索引，也成聚簇索引，不允许有空值，并由数据库帮我们自动创建。")]),_._v(" "),v("p",[_._v("组合索引：组合表中多个字段创建的索引，遵守最左前缀匹配规则。")]),_._v(" "),v("p",[_._v("全文索引：用于支持全文搜索的一种技术。它允许对文本内容进行快速、高效的搜索，并返回与搜索条件匹配的结果。")]),_._v(" "),v("h3",{attrs:{id:"_19-索引常用的两种数据结构是什么-有什么区别-★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_19-索引常用的两种数据结构是什么-有什么区别-★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("19. 索引常用的两种数据结构是什么？有什么区别？★★★★")])])]),_._v(" "),v("p",[_._v("MySQL 中常用的是 Hash 和 B + 树索引。")]),_._v(" "),v("p",[_._v("区别：")]),_._v(" "),v("p",[_._v("（1）"),v("strong",[v("strong",[_._v("实现方式")])])]),_._v(" "),v("p",[_._v("Hash 索引底层就是 Hash 表，进行查询时调用 Hash 函数获取到相应的键值（对应地址），然后回表查询获得实际数据。")]),_._v(" "),v("p",[_._v("B + 树索引底层实现原理是多路平衡查找树，对于每一次的查询都是从根节点出发，查询到叶子节点方可以获得所查键值，最后查询判断是否需要回表查询。")]),_._v(" "),v("p",[_._v("（3）"),v("strong",[v("strong",[_._v("使用场景")])])]),_._v(" "),v("p",[_._v("Hash 索引适合于等值查询，即根据索引列的具体值进行查询。对于范围查询或排序操作，Hash 索引的效果不好。")]),_._v(" "),v("p",[_._v("B + 树索引适用于范围查询、排序和模糊匹配等操作。B + 树索引的有序性使得范围查询更加高效，而且能够支持一些特殊的查询需求，如前缀匹配等。")]),_._v(" "),v("p",[_._v("（4）"),v("strong",[v("strong",[_._v("性能特点")])])]),_._v(" "),v("p",[_._v("Hash 索引的读取性能通常比 B + 树索引高，因为通过散列值可以直接定位到存储索引项的位置。但如果存在哈希冲突，可能需要进行链式查找，会影响性能。")]),_._v(" "),v("p",[_._v("B + 树索引的读取性能在范围查询和排序操作上通常更好。B + 树索引具有较高的数据聚集性，利于顺序访问，且支持部分加载等优化策略。")]),_._v(" "),v("p",[_._v("Hash 索引对于插入和更新操作性能较好，因为哈希表的插入和查找操作复杂度为 O(1)。而 B + 树索引由于需要维护有序性，插入和更新操作相对较慢。")]),_._v(" "),v("h3",{attrs:{id:"_20-为什么-b-树比-b-树更适合应用于数据库索引-★★★★"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_20-为什么-b-树比-b-树更适合应用于数据库索引-★★★★"}},[_._v("#")]),_._v(" "),v("strong",[v("strong",[_._v("20. 为什么 B + 树比 B 树更适合应用于数据库索引？★★★★")])])]),_._v(" "),v("p",[v("strong",[_._v("（1）"),v("strong",[v("strong",[_._v("B + 树减少了 IO")]),_._v(" 次数")])])]),_._v(" "),v("p",[_._v("由于索引文件很大因此索引文件存储在磁盘上，B + 树的非叶子结点只存关键字不存数据，因而单个页可以存储更多的关键字，即一次性读入内存的需要查找的关键字也就越多，磁盘的随机 I/O 读取次数相对就减少了。")]),_._v(" "),v("p",[v("strong",[_._v("（2）****B + 树查")]),_._v("询效率更稳定****")]),_._v(" "),v("p",[_._v("由于数据只存在在叶子结点上，所以查找效率固定为 O(log n)，所以 B + 树的查询效率相比 B 树更加稳定。")]),_._v(" "),v("p",[v("strong",[_._v("（3）****B + 树更加适合范围")]),_._v("查找****")]),_._v(" "),v("p",[_._v("B + 树叶子结点之间用链表有序连接，所以扫描全部数据只需扫描一遍叶子结点，利于扫库和范围查询；B 树由于非叶子结点也存数据，所以只能通过中序遍历按序来扫。也就是说，对于范围查询和有序遍历而言，B + 树的效率更高。")]),_._v(" "),v("p",[_._v("原文链接："),v("a",{attrs:{href:"https://blog.csdn.net/m0_53140426/article/details/140252882",target:"_blank",rel:"noopener noreferrer"}},[_._v("计算机保研/考研面试题——数据库基础篇_保研数据库面试-CSDN博客"),v("OutboundLink")],1)])])}),[],!1,null,null,null);v.default=r.exports}}]);